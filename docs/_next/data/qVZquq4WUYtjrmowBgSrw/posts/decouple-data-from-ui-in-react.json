{"pageProps":{"postData":{"id":"decouple-data-from-ui-in-react","contentHtml":"<figure>\n\t<img src='https://cdn-images-1.medium.com/max/556/1*goD09hSrSRRjYBjiCrimJQ.jpeg'>\n\t<figcaption>c. 1512, Oil on canvas, Source: <a href=\"https://programming-memes.com/do-you-like-spaghetti/\">programming-memes.com</a></figcaption>\n</figure>\n<hr>\n<p>In <a href=\"/posts/decouple-data-from-ui-with-react-hooks\">Part 1</a>, I presented an approach to decouple the data fetching/management layer from the UI, which would free us from being locked into any particular data library or framework. Let’s call this <strong>Approach A</strong>.</p>\n<h3>Approach A. Custom Hook</h3>\n<p>Let’s create a custom hook — <code>useSomeData</code> — that returns the properties <code>someData</code>, <code>loading</code>, and <code>error</code> regardless of the data fetching/management logic. The following are 3 different implementations of <code>useSomeData</code>.</p>\n<p><em>With Fetch API and component state:</em></p>\n<script src=\"https://gist.github.com/suhanw/8d1b24a42dea617288e28d767996e7cc.js\"></script>\n<p><em>With Redux:</em></p>\n<script src=\"https://gist.github.com/suhanw/aac361c9ab4856eed2cf5d5531ce655b.js\"></script>\n<p><em>With Apollo GraphQL:</em></p>\n<script src=\"https://gist.github.com/suhanw/eaeebbf6afd44b7b5509ec74a27656f7.js\"></script>\n<p>The 3 implementations above are <strong>interchangeable</strong> without having to modify this UI component:</p>\n<script src=\"https://gist.github.com/suhanw/a08783eb6302899bb91a88572a2ac86c.js\"></script>\n<p>But, as <a href=\"https://medium.com/u/3efad7746b00\">Julius Koronci</a> correctly pointed out, while the data fetching/management logic is decoupled, the <code>SomeComponent</code> UI is still coupled to the <code>useSomeData</code> hook.</p>\n<p>In other words, even though we can reuse <code>useSomeData</code> without <code>SomeComponent</code>, <strong>we cannot reuse</strong>  <strong><code>SomeComponent</code> without</strong>  <strong><code>useSomeData</code>.</strong></p>\n<p>Perhaps this is where Render Props and Higher Order Components do a better job at enforcing the separation of concerns (thanks again to Julius for highlighting this).</p>\n<hr>\n<h3>Approach B. Render Props</h3>\n<p>Instead of a custom hook that returns <code>someData</code>, <code>loading</code>, and <code>error</code>, let’s create a Render Props component — <code>SomeData</code> — that wraps around a function (i.e., children needs to be a function), implements the data logic, and passes in <code>someData</code>, <code>loading</code>, and <code>error</code> into the function.</p>\n<script src=\"https://gist.github.com/suhanw/263c954810fc5ab69292ed256e1494aa.js\"></script>\n<p>You can replace line 4 in the snippet above with Redux, Apollo GraphQL, or any data fetching/management layer of your choice.</p>\n<p><strong>We can now reuse</strong> <strong><code>SomeComponent</code> (UI component) without</strong> <strong><code>SomeData</code> (Render Props component). We can also reuse</strong>  <strong><code>SomeData</code> without</strong>  <strong><code>SomeComponent</code>.</strong></p>\n<hr>\n<h3>Approach C. Higher Order Components (HOC)</h3>\n<p>Let’s create a HOC — <code>withSomeData</code> — that accepts a React component as an argument, implements the data logic, and passes <code>someData</code>, <code>loading</code>, and <code>error</code> as props into the wrapped React component.</p>\n<script src=\"https://gist.github.com/suhanw/106e18601dff30a7d3f73a77ab2f861c.js\"></script>\n<p>You can replace line 5 in the snippet above with Redux, Apollo GraphQL, or any data fetching/management layer of your choice.</p>\n<p><strong>We can now reuse</strong> <strong><code>SomeComponent</code> (UI component) without</strong> <strong><code>withSomeData</code> (HOC). We can also reuse</strong>  <strong><code>withSomeData</code> without</strong>  <strong><code>SomeComponent</code>.</strong></p>\n<p>Today I learned.</p>\n<p>Which approach do you prefer and why?</p>\n<hr>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.bitsrc.io/understanding-react-render-props-and-hoc-b37a9576e196\">Understanding React Render Props and HOC</a> by <a href=\"https://medium.com/u/9c555799c00e\">Aditya Agarwal</a></li>\n<li><a href=\"https://kentcdodds.com/blog/react-hooks-whats-going-to-happen-to-render-props\">React Hooks: What’s going to happen to render props?</a> by <a href=\"https://medium.com/u/db72389e89d8\">Kent C. Dodds</a></li>\n<li><a href=\"https://www.richardkotze.com/coding/hoc-vs-render-props-react\">Higher-order components vs Render Props</a> by <a href=\"https://medium.com/u/e503a3e5ff3e\">Richard Kotze</a></li>\n</ul>\n<hr>\n<h3>Read More</h3>\n<ul>\n<li><a href=\"https://medium.com/javascript-in-plain-english/intro-to-react-server-side-rendering-3c2af3782d08\">Intro to React Server Side Rendering</a></li>\n<li><a href=\"https://dev.to/suhanw/decouple-data-from-ui-with-react-hooks-3amn\">Decouple Data from UI with React Hooks</a></li>\n</ul>\n","pin_order":3,"title":"Decouple Data from UI in React Part 2","description":"A further exploration of the Hooks, Render Props, and HOC patterns","image":"https://cdn-images-1.medium.com/max/556/1*goD09hSrSRRjYBjiCrimJQ.jpeg","tags":"react,javascript,webdev,softwaredesign","canonical_url":"https://medium.com/javascript-in-plain-english/how-to-decouple-data-from-ui-in-react-d6b1516f4f0b","author":"Suhan Wijaya","date":"2020-12-15"}},"__N_SSG":true}