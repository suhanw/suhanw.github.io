{"pageProps":{"postData":{"id":"decouple-data-from-ui-with-react-hooks","contentHtml":"<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*Ysy1EpS9hF5J3qnkT5TX3A.png'>\n\t<figcaption>Source: <a href=\"https://imgur.com/gallery/CgWZFId\">Imgur</a></figcaption>\n</figure>\n<hr>\n<p>I‚Äòm certain you have seen (or written) this common React pattern: (a) render a placeholder/ loader/spinner while some data is fetched via AJAX, then (b) re-render the component based on the data received. Let‚Äôs write a functional component leveraging the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a> to accomplish this.</p>\n<script src=\"https://gist.github.com/suhanw/b8aa23f97f06ddc3b068b2c2368e4ca2.js\"></script>\n<hr>\n<p>Let‚Äôs say my app grows, and there are X components that use the same data fetching logic because‚Ä¶ reasons. To avoid spamming the server with data requests, I decide to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">Local Storage</a> to cache the data.</p>\n<p><strong>OK‚Ä¶ does that mean I need to update the data logic</strong>  <strong>X times? üò¨üò±</strong></p>\n<p>Nope, let‚Äôs <a href=\"https://medium.com/better-programming/kiss-dry-and-code-principles-every-developer-should-follow-b77d89f51d74\">DRY it up</a> by writing a custom hook <code>useSomeData</code>.</p>\n<script src='https://gist.github.com/suhanw/3e948918f96a1b7680bdeb86bbbbdaa2.js'></script>\n<p>The components that share this data logic now look concise.</p>\n<script src='https://gist.github.com/suhanw/9e23e8b61dfb58db45e280124b22fe55.js'></script>\n<hr>\n<p><strong>OK‚Ä¶ DRY code is great, but so what?</strong></p>\n<p>Let‚Äôs say my app becomes complex, so I decide to use Redux to handle AJAX requests and maintain a global app state. I simply update the implementation of <code>useSomeData</code> <em>without touching the UI components</em>.</p>\n<script src='https://gist.github.com/suhanw/aac361c9ab4856eed2cf5d5531ce655b.js'></script>\n<p>Then GraphQL comes along and I jump on the bandwagon. Again, I simply update the implementation of <code>useSomeData</code> <em>without touching the UI components</em>.</p>\n<script src='https://gist.github.com/suhanw/eaeebbf6afd44b7b5509ec74a27656f7.js'></script>\n<hr>\n<p><strong>Rinse and repeat whenever I‚Äôm compelled to update the data layer with the latest/hottest state management framework or API paradigm.</strong></p>\n<p>To me, this looks a lot like the classic Dependency Inversion Principle, the ‚ÄúD‚Äù in SOLID (check out this excellent <a href=\"https://medium.com/better-programming/revisiting-solid-927e6a5202d3\">explainer</a> by <a href=\"https://medium.com/u/12cc371abade\">Matthew Lucas</a>). While this is not OOP by any means, where we formally define an abstract <code>Interface</code> and create a concrete <code>Class</code> that implements that <code>Interface</code>, I would argue that there is a de facto ‚Äúinterface‚Äù that <code>useSomeData</code> provides to the various UI components using it. In this example, the UI doesn‚Äôt care how <code>useSomeData</code> works, as long as it receives <code>someData</code>, <code>loading</code>, and <code>error</code> from the hook.</p>\n<p><strong>So in theory, this frees the UI from being locked into any particular implementation of the data layer, and enables migrating to new implementations (frameworks/libraries/etc) without having to update the UI code, as long as the ‚Äúinterface‚Äù contract is honored.</strong></p>\n<p>Curious to hear your thoughts.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/540/1*F1CfUAi51VQA4NJd3Fj_cA.jpeg'>\n\t<figcaption>Source: <a href=\"https://www.pinterest.com/pin/333759022356307210/\">Pinterest</a></figcaption>\n</figure>\n<hr>\n<p><strong>P.S.</strong> The <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">Container pattern</a>, <a href=\"https://reactjs.org/docs/render-props.html\">Render Props</a>, and <a href=\"https://reactjs.org/docs/higher-order-components.html\">HOC</a> are popular options to decouple the data layer from the UI layer for classical components. This article is not meant to be a debate as to whether Hooks is better or worse. I‚Äôm simply sharing how I learned to use Hooks to apply the same separation of concerns.</p>\n<hr>\n<h3>Read More</h3>\n<ul>\n<li><a href=\"https://medium.com/javascript-in-plain-english/how-to-decouple-data-from-ui-in-react-d6b1516f4f0b\">Decouple Data from UI in React Part 2</a></li>\n<li><a href=\"https://medium.com/javascript-in-plain-english/intro-to-react-server-side-rendering-3c2af3782d08\">Intro to React Server Side Rendering</a></li>\n</ul>\n<hr>\n<p>üì´ <em>Let‚Äôs connect on</em> <a href=\"https://www.linkedin.com/in/suhanwijaya/\"><em>LinkedIn</em></a> <em>or</em> <a href=\"https://twitter.com/suhanw\"><em>Twitter</em></a><em>!</em></p>\n","pin_order":3,"title":"Decouple Data from UI with React Hooks","description":"And how I ‚Äúprogram to an interface‚Äù with JavaScript functions","image":"https://cdn-images-1.medium.com/max/540/1*F1CfUAi51VQA4NJd3Fj_cA.jpeg","tags":"softwaredesign,javascript,react,webdev","canonical_url":"https://medium.com/javascript-in-plain-english/decouple-data-from-ui-with-react-hooks-6f7fe968c3e3","date":"2020-11-23"}},"__N_SSG":true}