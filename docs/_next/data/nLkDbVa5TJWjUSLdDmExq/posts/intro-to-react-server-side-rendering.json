{"pageProps":{"postData":{"id":"intro-to-react-server-side-rendering","contentHtml":"<figure>\n\t<img src='https://cdn-images-1.medium.com/max/900/1*PXvYmj3eEqaRigoFGcJZTA.jpeg'>\n\t<figcaption>Source: <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/5lnsko/programming_environment_dilbert_comic_strip_on/\">Reddit</a> and Dilbert by Scott Adams</figcaption>\n</figure>\n<hr>\n<p>This is the first in (hopefully) a series of articles to document the lessons I learned building and maintaining SSR apps.</p>\n<p>This article does not cover the pros/cons of SSR, or the pros/cons of not using tooling or frameworks (e.g., Create React App, Next.js, etc).</p>\n<p>I fully acknowledge that manually setting up build configs is painful. There is plenty of great tooling out there to abstract away these configs, so you probably don‚Äôt even need to touch any of this stuff to build awesome apps.</p>\n<p>But for those ready to embrace the pain‚Ä¶</p>\n<hr>\n<h3>Overview</h3>\n<p>Let‚Äôs start with the basics. We will use <strong>React</strong> , <strong>webpack</strong> , and <strong>Express</strong> to build an SSR app that works as follows:</p>\n<ol>\n<li>Browser sends HTTP request to server to load a page.</li>\n<li>Server receives HTTP request and turns React JSX into HTML markup.</li>\n<li>Server inserts the markup into a HTML template and sends the HTML response back to the browser.</li>\n<li>Browser renders the HTML, downloads the client-side JavaScript bundle, and ‚Äúhydrates‚Äù the HTML.</li>\n</ol>\n<p>Also, I will focus on dev mode to keep this article short. I‚Äôm saving production mode for a future(ish üòÖ) article.</p>\n<hr>\n<h3>Project structure</h3>\n<p>Before diving into the code, let‚Äôs get situated with the project structure.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">.\n+-- client\n| +-- components\n| | +-- App\n| | | +-- index.js\n| | | +-- style.less\n| +-- index.js\n+-- server\n| +-- index.js\n+-- babel.config.js\n+-- package.json\n+-- webpack.client.config.js\n+-- webpack.server.config.js\n+-- webpack.shared.config.js</code></pre></div>\n<p>A quick rundown of the files in this project:</p>\n<ul>\n<li><code class=\"language-unknown\">./client/components</code> contains React and CSS code.</li>\n<li><code class=\"language-unknown\">./client/index.js</code> is the client-side <a href=\"https://webpack.js.org/concepts/entry-points/\">entry point</a> for webpack, where we ‚Äúhydrate‚Äù the HTML rendered on the server-side.</li>\n<li><code class=\"language-unknown\">./server/index.js</code> is the server-side <a href=\"https://webpack.js.org/concepts/entry-points/\">entry point</a> for webpack, where we define the route to serve the HTML page.</li>\n<li><code class=\"language-unknown\">./babel.config.js</code> is the <a href=\"https://babeljs.io/docs/en/config-files#configuration-file-types\">thing</a> that enables you to use React JSX and ES6+ features in the browser and Node.js. You may have seen alternative versions of this file (.babelrc, babel.config.json, etc).</li>\n<li><code class=\"language-unknown\">./webpack.shared.config.js</code> is the config that webpack uses for both client-side and server-side code.</li>\n<li><code class=\"language-unknown\">./webpack.client.config.js</code> is the config specific to the client-side code.</li>\n<li><code class=\"language-unknown\">./webpack.server.config.js</code> is the config specific to the server-side code.</li>\n</ul>\n<hr>\n<h3>Dependencies</h3>\n<p>Here are the dependencies (and versions) used at the time of this writing. I will also mention which relevant dependencies to install in each of the following sections.</p>\n<script src='https://gist.github.com/suhanw/2afd2841c1beb5a107b5547b27b786be.js'></script>\n<p>Now let‚Äôs look at each file in our project in more detail.</p>\n<hr>\n<h3>webpack</h3>\n<p>If you are accustomed to building SPAs (Single Page Apps), you may not have needed webpack to process your server-side code. But to enable SSR, the server must be able to read React code, or specifically‚Ää‚Äî‚ÄäJSX. This means, we now need webpack to work its magic on our server-side code. Plus, you‚Äôll also get to use ES6+ syntax that may not be natively supported in Node.js, e.g., import and export. (Sidenote: you don‚Äôt need webpack if you choose <a href=\"https://reactjs.org/docs/react-without-jsx.html\">not to write JSX</a> at all. üò¨)</p>\n<p>I won‚Äôt go through every webpack option in great detail, but here is a <a href=\"https://www.valentinog.com/blog/webpack/\">great explainer</a> if you are interested.</p>\n<h4><em>Common webpack config for client-side and server-side</em></h4>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i webpack webpack-cli babel-loader</code></pre></div>\n<script src='https://gist.github.com/suhanw/128bbb5bdfb18b854d0ca0ed2ee5b884.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> For our purposes, we want to explicitly set <code class=\"language-unknown\">mode</code> to <strong>development</strong>. If we go with the default value of <strong>production</strong> , we may lose useful console warnings/errors from libraries like React, and the error stack traces are incredibly hard to read due to code minification. Read more about <strong>production</strong> and <strong>development</strong> modes <a href=\"https://webpack.js.org/configuration/mode/\">here</a>.</p>\n<p><strong>[B]</strong> This tells webpack to preprocess <code class=\"language-unknown\">.js</code> files with <code class=\"language-unknown\">babel-loader</code>, which <a href=\"https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them#:~:text=Transpilers%2C%20or%20source%2Dto%2D,are%20said%20to%20target%20JavaScript.\">transpiles</a> ES6+ and JSX code into JavaScript code that is readable by browsers and Node.js servers. This loader uses the options we specify in <code class=\"language-unknown\">babel.config.js</code>.</p>\n<p><strong>[C]</strong> This means I don‚Äôt have to type out <code class=\"language-unknown\">.js</code> or <code class=\"language-unknown\">.less</code> when importing files with those extensions. For example, <code class=\"language-unknown\">import App from ‚Äò./components/App‚Äô</code>.</p>\n<h4><em>Babel config</em></h4>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react</code></pre></div>\n<script src='https://gist.github.com/suhanw/33f2d36ef3922ebbb4ce3d425e407eaa.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> This tells webpack to transpile ES6+ features into JS code that‚Äôs natively supported in Node.js and (most modern) browsers. Read the <a href=\"https://babeljs.io/docs/en/babel-preset-env\">docs</a> for more details.</p>\n<p><strong>[B]</strong> This tells webpack to transpile React JSX into JavaScript code. Read the <a href=\"https://babeljs.io/docs/en/babel-preset-react\">docs</a> for more details.</p>\n<h4><em>Client-side webpack config</em></h4>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i webpack webpack-cli webpack-merge webpack-dev-server mini-css-extract-plugin css-loader less-loader less</code></pre></div>\n<script src='https://gist.github.com/suhanw/98c17ffc82967bc28a84289f9b55d54b.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> This is the entry point for the client-side code, where we render the React app into the DOM.</p>\n<p><strong>[B]</strong> This tells webpack to save the transpiled client-side JS bundle output as <code class=\"language-unknown\">./build/client/scripts/bundle.js</code>. Not super important for dev mode because we are using webpack-dev-server to transpile the client-side bundle ‚Äúin memory‚Äù. Per the <a href=\"https://webpack.js.org/guides/development/#using-webpack-dev-server\">docs</a>:</p>\n<blockquote>\n<p><code class=\"language-unknown\">webpack-dev-server</code> doesn‚Äôt write any output files after compiling. Instead, it keeps bundle files in memory and serves them as if they were real files mounted at the server‚Äôs root path.</p>\n</blockquote>\n<p><strong>[C]</strong> The <code class=\"language-unknown\">publicPath</code> option tells webpack where we will be serving the client-side bundle. Notice that we are using the same <code class=\"language-unknown\">clientPort</code> for <code class=\"language-unknown\">devServer</code>, which tells <code class=\"language-unknown\">webpack-dev-server</code> to serve the client-side bundle from <code class=\"language-unknown\">http://localhost:8080/</code>. And since the <code class=\"language-unknown\">filename</code> option tells webpack to nest <code class=\"language-unknown\">bundle.js</code> in a <code class=\"language-unknown\">scripts</code> folder, the client-side bundle will be served from <code class=\"language-unknown\">localhost:8080/scripts/bundle.js</code>.</p>\n<p><strong>[D]</strong> <a href=\"https://css-tricks.com/css-modules-part-1-need/\">CSS modules</a> and CSS preprocessors (e.g., Less, Sass) deserve an article. But in a nutshell, this piece of config tells webpack to:</p>\n<ul>\n<li>transpile <code class=\"language-unknown\">.less</code> files into CSS code that the browser understands,</li>\n<li>allow us to <code class=\"language-unknown\">import style from ‚Äò./style.less‚Äô</code> which is scoped <strong>locally</strong> to the component importing it (i.e., we don‚Äôt have to worry about CSS class naming collisions or specificity issues as the app grows),</li>\n<li>generate a CSS bundle that‚Äôs served separately from the JS bundle. In this instance, the <code class=\"language-unknown\">MiniCssExtractPlugin</code> tells webpack to serve the CSS bundle from <code class=\"language-unknown\">localhost:8080/styles/bundle.css</code> in dev mode.</li>\n</ul>\n<p><strong>[E]</strong> Remember <code class=\"language-unknown\">webpack.shared.config.js</code>? This line merges <code class=\"language-unknown\">webpack.shared.config.js</code> with <code class=\"language-unknown\">webpack.client.config.js</code>.</p>\n<h4><em>Server-side webpack config</em></h4>\n<p>Hang in there, this is the last webpack config that we‚Äôll cover.</p>\n<p>Install the relevant dependencies (and grab a ‚òïÔ∏è):</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i webpack webpack-cli webpack-node-externals css-loader</code></pre></div>\n<script src='https://gist.github.com/suhanw/93565516165d8225566ee0dcac854e3d.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> The default value is <strong>web</strong>, so we need to explicitly set it to <strong>node</strong> for webpack to work its magic on the server-side code.</p>\n<p><strong>[B]</strong> This is the entry point for the server-side code.</p>\n<p><strong>[C]</strong> This tells webpack to save the transpiled server-side JS bundle output as <code class=\"language-unknown\">./build/server/bundle.js</code>.</p>\n<p><strong>[D]</strong> This tells webpack not to include the code from <code class=\"language-unknown\">node\\_modules</code> in the server-side bundle.</p>\n<p><strong>[E]</strong> This tells webpack not to do any work over the CSS code on the server-side, but simply to make sure that every HTML element‚Äôs <code class=\"language-unknown\">className</code> matches that in the CSS code being served on the client-side.</p>\n<p><strong>[F]</strong> Remember <code class=\"language-unknown\">webpack.shared.config.js</code>? This line merges <code class=\"language-unknown\">webpack.shared.config.js</code> with <code class=\"language-unknown\">webpack.server.config.js</code>.</p>\n<hr>\n<h3>React component</h3>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i react</code></pre></div>\n<p>Let‚Äôs create a simple React component <code class=\"language-unknown\">App</code>, which renders our favorite greeting with some basic styles, as well as a button that displays an alert dialog when clicked. We will render this component on the server-side and hydrate it on the client-side.</p>\n<script src='https://gist.github.com/suhanw/22786482aae23f82852b3fa15faf46e0.js'></script>\n<script src='https://gist.github.com/suhanw/ff1f2997761dbec42ae3a80b7c7bdca2.js'></script>\n<hr>\n<h3>Server-side code</h3>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i express react react-dom</code></pre></div>\n<p>Let‚Äôs create an Express server and define a route that serves an HTML page when a user visits <code class=\"language-unknown\">http://localhost:3000/</code>.</p>\n<script src='https://gist.github.com/suhanw/23f6122050af076a51199a8d4b165d5b.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> This turns the React component <code class=\"language-unknown\">App</code> into HTML string, which we then insert in between the <code class=\"language-unknown\">div</code> with the ID <strong>‚Äússr-app‚Äù.</strong></p>\n<p><strong>[B]</strong> Remember the <code class=\"language-unknown\">devServer</code> option in <code class=\"language-unknown\">webpack.client.config.js</code> to start <code class=\"language-unknown\">webpack-dev-server</code> in dev mode? These script and link tags tell the browser to fetch the client-side JS and CSS bundles respectively from the webpack-dev-server running on <code class=\"language-unknown\">http://localhost:8080</code>.</p>\n<hr>\n<h3>Client-side code</h3>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i react react-dom</code></pre></div>\n<p>In the client-side entry point, we will ‚Äú<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">hydrate</a>‚Äù the React component that was SSR-ed into the root DOM container with the ID <strong>‚Äússr-app‚Äù</strong>.</p>\n<script src='https://gist.github.com/suhanw/be366494b9bf2bdbd2272c732f1bbbe8.js'></script>\n<p>Per the <a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\">docs</a>:</p>\n<blockquote>\n<p>If you call <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><em>ReactDOM.hydrate()</em></a> on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n</blockquote>\n<p>So in this example, the client-side code simply attaches the button‚Äôs click handler without having to re-render any markup in the <code class=\"language-unknown\">App</code> component.</p>\n<hr>\n<h3>Putting it all together</h3>\n<p>Install the relevant dependencies:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm i rimraf webpack webpack-cli webpack-dev-server npm-run-all nodemon</code></pre></div>\n<p>This is the <code class=\"language-unknown\">scripts</code> key in the <code class=\"language-unknown\">package.json</code> file, where we define several <code class=\"language-unknown\">npm</code> scripts to build and start the app in dev mode.</p>\n<script src='https://gist.github.com/suhanw/5c87c373511b0d2e053ebca5fde8d6aa.js'></script>\n<p>Let‚Äôs look at each of them:</p>\n<ul>\n<li><code class=\"language-unknown\">clear</code>‚Ää‚Äî‚ÄäThis uses <a href=\"https://github.com/isaacs/rimraf\">rimraf</a> to delete the <code class=\"language-unknown\">./build</code> folder.</li>\n<li><code class=\"language-unknown\">build:server</code>‚Ää‚Äî‚ÄäThis tells webpack to build the server-side code and save the bundle output to <code class=\"language-unknown\">./build/server/bundle.js</code> (as per <code class=\"language-unknown\">./webpack.server.config.js</code>).</li>\n<li><code class=\"language-unknown\">start:server</code>‚Ää‚Äî‚ÄäThis starts the Express server on <code class=\"language-unknown\">http://localhost:3000</code>.</li>\n<li><code class=\"language-unknown\">dev:server</code>‚Ää‚Äî‚ÄäThis uses <a href=\"https://github.com/remy/nodemon\">nodemon</a> to monitor any file changes in the working directory (minus <code class=\"language-unknown\">./build</code>), and <a href=\"https://dev.to/scottw/npm-run-all-b7e-temp-slug-8424854\">npm-run-all</a> to re-run <code class=\"language-unknown\">clear</code>, <code class=\"language-unknown\">build:server</code>, and <code class=\"language-unknown\">start:server</code> whenever there are file changes.</li>\n<li><code class=\"language-unknown\">dev:client</code>‚Ää‚Äî‚ÄäThis tells webpack to ‚Äúbuild‚Äù the client-side code, save the bundle output ‚Äúin memory‚Äù, and serve it from <code class=\"language-unknown\">http://localhost:8080</code> (as per <code class=\"language-unknown\">./webpack.client.config.js</code>).</li>\n<li><code class=\"language-unknown\">dev</code>‚Ää‚Äî‚ÄäThis runs all of the above with a single command.</li>\n</ul>\n<p>Run <code class=\"language-unknown\">npm run dev</code> in the terminal to spin up the SSR app. Open up <code class=\"language-unknown\">http://localhost:3000</code> in your browser. üéâü•≥</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*ht6aRr0glttBE5TlouMJJQ.png'><figcaption>Server-side rendering and client-side hydration</figcaption>\n</figure>\n<p>And click on the button <code class=\"language-unknown\">Say Hello Back!</code> üôåüéä</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*JcnDOG4whmExaBhNoyG8Vg.png'><figcaption>Clicking the button triggers the alert dialog</figcaption>\n</figure>\n<p>Now, let‚Äôs disable client-side JavaScript‚Ä¶</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/722/1*43qx5zcj8QnwSjXQT-Nhsw.png'><figcaption>Disable client-side JavaScript</figcaption>\n</figure>\n<p>‚Ä¶and refresh the page. IT‚ÄôS NOT A BLANK PAGE! ü§Ø</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*fFgBAnbm-9c3gN6J_yA1eg.png'><figcaption>Server-side rendered page</figcaption>\n</figure>\n<p>Sidenote: nothing will happen if you click on the button. That‚Äôs because the event handlers are attached by the client-side code (aka ‚Äúhydration‚Äù). Recall the <a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\">docs</a>:</p>\n<blockquote>\n<p>If you call <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><em>ReactDOM.hydrate()</em></a> on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n</blockquote>\n<p>And since we disabled client-side JavaScript, what you see is just plain HTML.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/894/1*xGp1Ds4XtlabyFoGwI2G1A.jpeg'><figcaption>Source: <a href=\"https://www.thecoderpedia.com/blog/programming-memes/\">CoderPedia</a></figcaption>\n</figure>\n<p>In future(ish üòÖü§ûüèª) articles, I plan to cover more advanced features like routing, data fetching, caching, code-splitting, lazy-loading, and deploying a production app.</p>\n<hr>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://www.valentinog.com/blog/webpack/\">A mostly complete guide to webpack 5</a> by <a href=\"https://twitter.com/gagliardi_vale\">Valentino Gagliardi</a></li>\n<li><a href=\"https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them#:~:text=Transpilers,%20or%20source-to-,are%20said%20to%20target%20JavaScript.\">JavaScript Transpilers: What &#x26; Why</a> by <a href=\"https://medium.com/u/1baf735d9bdc\">Peleke Sengstacke</a></li>\n<li><a href=\"https://css-tricks.com/css-modules-part-1-need/\">What are CSS Modules and why do we need them?</a> by <a href=\"https://medium.com/u/aae529a3f8b0\">Robin Rendle</a></li>\n</ul>\n<hr>\n<h3>Read More</h3>\n<ul>\n<li><a href=\"https://dev.to/suhanw/decouple-data-from-ui-with-react-hooks-3amn\">Decouple Data from UI with React Hooks</a></li>\n<li><a href=\"https://dev.to/suhanw/decouple-data-from-ui-in-react-part-2-4amk\">Decouple Data from UI in React Part 2: Hooks, Render Props, and HOC patterns</a></li>\n<li><a href=\"https://dev.to/suhanw/accessible-ui-stop-making-clickable-divs-g8k\">Accessible UI: Stop making clickable DIVs</a></li>\n</ul>\n<hr>\n<p>üì´ <em>Let‚Äôs connect on</em> <a href=\"https://www.linkedin.com/in/suhanwijaya/\"><em>LinkedIn</em></a> <em>or</em> <a href=\"https://twitter.com/suhanw\"><em>Twitter</em></a><em>!</em></p>\n","pin_order":2,"title":"Intro to React Server Side Rendering","description":"How to build a React SSR app without any tooling or framework","image":"https://cdn-images-1.medium.com/max/900/1*PXvYmj3eEqaRigoFGcJZTA.jpeg","tags":"javascript,react,nodejs,webdev","canonical_url":"https://medium.com/javascript-in-plain-english/intro-to-react-server-side-rendering-3c2af3782d08","date":"2021-01-11"}},"__N_SSG":true}