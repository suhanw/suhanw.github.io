{"pageProps":{"postData":{"id":"deploy-react-ssr-to-production","contentHtml":"<figure>\n\t<img src='https://cdn-images-1.medium.com/max/955/1*i7eATXxurPAPCyLIJ4X5xw.png'>\n</figure>\n<p>This is the sequel to <a href=\"https://www.suhanwijaya.com/posts/intro-to-react-server-side-rendering\">Intro to React Server Side Rendering</a>, so check that out if you haven’t already.</p>\n<p>Let’s deploy a basic React SSR app on Google Cloud Platform (GCP).</p>\n<p>In this article, I’ll deploy a <em>Web Application Server</em>, upload webpack bundles to <em>Cloud Storage</em>, and serve those bundles via <em>CDN.</em> I’m using the italicized terms as defined in this excellent article, <a href=\"https://engineering.videoblocks.com/web-architecture-101-a3224e126947\">Web Architecture 101</a> by <a href=\"https://medium.com/u/d05e0fdb8e4f\">Jonathan Fulton</a>.</p>\n<p>Let’s accomplish this in two parts.</p>\n<p><em>Part 1: Build and start the app locally.</em></p>\n<p><em>Part 2: Deploy to the cloud.</em></p>\n<hr>\n<h3>Part 1: Build and start the app locally</h3>\n<p>Here’s the big picture:</p>\n<ol>\n<li>Transpile client-side and server-side bundles via webpack.</li>\n<li>Start a static server to serve the client-side bundles.</li>\n<li>Start the server-side bundle as the Web Application Server.</li>\n</ol>\n<p>For reference, here’s the <a href=\"https://github.com/suhanw/blog-react-ssr/tree/local-build\">Github repo</a> for the code used in this section.</p>\n<hr>\n<h4>React component</h4>\n<p>Let’s create a simple React component App, which renders our favorite greeting with some basic styles, as well as a button that displays an alert dialog when clicked. We will render this component on the server-side and hydrate it on the client-side.</p>\n<script src='https://gist.github.com/suhanw/22786482aae23f82852b3fa15faf46e0.js'></script>\n<script src='https://gist.github.com/suhanw/ff1f2997761dbec42ae3a80b7c7bdca2.js'></script>\n<hr>\n<h4>webpack configs</h4>\n<p>Instead of using <code class=\"language-unknown\">webpack-dev-server</code> to build the client-side bundles in memory (like in <a href=\"https://www.suhanwijaya.com/posts/intro-to-react-server-side-rendering\">Intro to React Server Side Rendering</a>), we’ll be writing the bundle output into files, and starting a local static server to serve those files. Note the annotated lines below.</p>\n<script src='https://gist.github.com/suhanw/a8805ba3726a51525c5df782374e8a54.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> Save client-side bundle output to <code class=\"language-unknown\">./build/client</code></p>\n<p><strong>[B]</strong> Write JavaScript code into .<code class=\"language-unknown\">/scripts/bundle.js</code></p>\n<p><strong>[C]</strong> Write CSS code into <code class=\"language-unknown\">./styles/bundle.css</code></p>\n<p>The other settings are not super relevant to what we’re trying to accomplish here, but more details can be found in <a href=\"https://www.suhanwijaya.com/posts/intro-to-react-server-side-rendering\">Intro to React Server Side Rendering</a>.</p>\n<hr>\n<h4>HTML response</h4>\n<p>While the HTML markup will be server-side rendered, we need to make sure the bundled JS and CSS files are downloaded on the client-side to “hydrate” the markup.</p>\n<script src='https://gist.github.com/suhanw/9951fb3e09f6628cbf9d92deeced204e.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> This turns the React component App into an HTML string, which we then insert into the div with the ID <strong>“ssr-app”</strong>. I.e., the SSR-ed markup.</p>\n<p><strong>[B]</strong> This loads the CSS code to style the DOM elements in our SSR-ed markup.</p>\n<p><strong>[C]</strong> This loads the JS code to “hydrate” the markup with interactivity. In this example, it attaches the click handler to the button.</p>\n<p><strong>[D]</strong> This is the local static server that serves the client-side bundles.</p>\n<p>Cool, cool, cool.</p>\n<hr>\n<h4>Build and start scripts</h4>\n<p>Let’s define several npm scripts to build and start our app locally. Think of these as the steps to get our app up and running.</p>\n<script src='https://gist.github.com/suhanw/dd77beae65b50b16ccb5b52471889394.js'></script>\n<ul>\n<li><code class=\"language-unknown\">build:client</code> — This tells webpack to build the client-side code and save the bundle output in <code class=\"language-unknown\">./build/client</code>.</li>\n<li><code class=\"language-unknown\">build:server</code> — This tells webpack to build the server-side code and save the bundle output to <code class=\"language-unknown\">./build/server/bundle.js</code>.</li>\n<li><code class=\"language-unknown\">prebuild</code> — This uses <a href=\"https://github.com/isaacs/rimraf\">rimraf</a> to delete the <code class=\"language-unknown\">./build</code> folder.</li>\n<li><code class=\"language-unknown\">build</code> — Runs <code class=\"language-unknown\">build:client</code> and <code class=\"language-unknown\">build:server</code> in parallel.</li>\n<li><code class=\"language-unknown\">start:client</code> — This serves <code class=\"language-unknown\">./build/client</code> as static files on <code class=\"language-unknown\">http://localhost:5000</code>, using the aptly named library <a href=\"https://github.com/vercel/serve\">serve</a>. Note that this is the <code class=\"language-unknown\">cdnHost</code> we insert into the HTML response above.</li>\n<li><code class=\"language-unknown\">start:server</code> — This starts the Express server on <code class=\"language-unknown\">http://localhost:3000</code>.</li>\n<li><code class=\"language-unknown\">start:local</code> — Runs <code class=\"language-unknown\">start:client</code> and <code class=\"language-unknown\">start:server</code> in parallel.</li>\n</ul>\n<hr>\n<h4>Putting it all together</h4>\n<p>In the terminal, let’s run the npm scripts in the following order:</p>\n<ol>\n<li><code class=\"language-unknown\">npm run build</code></li>\n<li><code class=\"language-unknown\">npm run start:local</code></li>\n</ol>\n<p>Our SSR app is now up and running on <code class=\"language-unknown\">http://localhost:3000</code>! 🎉</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*V8TXde5Bpc_OoTeQdbxf6A.png'>\n</figure>\n<p>Clicking the button should trigger the alert dialog! 🙌</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*BEf6jWA_6lIFmEcohfV_iw.png'>\n</figure>\n<hr>\n<h3>Part 2: Deploy to the cloud</h3>\n<p>We’ll now replicate what we just did locally, <strong>in the cloud!</strong></p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/800/1*OuRPNKuAgKXQ3QdqmQg1AA.jpeg'><figcaption>Source: <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/6cer5t/what_are_clouds_made_of/\">Reddit</a></figcaption>\n</figure>\n<hr>\n<p>Again, here’s the big picture:</p>\n<ol>\n<li>Use GCP Cloud Build to execute the following build steps.</li>\n<li>Transpile client-side and server-side bundles via webpack.</li>\n<li>Upload the client-side bundles to GCP Cloud Storage, which will be served as static files over CDN.</li>\n<li>Deploy the server-side bundle to GCP App Engine as the Web Application Server.</li>\n</ol>\n<p>For reference, here’s the <a href=\"https://github.com/suhanw/blog-react-ssr/tree/deploy\">Github repo</a> for the code used in this section.</p>\n<p>For this section, I’m assuming that you have some level of familiarity with GCP, including the fact that you’ve already signed up for an account.</p>\n<p><strong>Please note there may be billing charges when you use GCP products/services!</strong></p>\n<p>Take a deep breath, and here we go!</p>\n<hr>\n<h4>Create a new GCP project</h4>\n<p>Go to <a href=\"https://console.cloud.google.com/cloud-resource-manager\">IAM &#x26; Admin > Manage Resources</a> and create a new project. Let’s name this project <code class=\"language-unknown\">react-ssr</code>.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*B6FjoiNPtXTgX-Vk5Omz5Q.png'>\n</figure>\n<p>Make sure the newly created project <code class=\"language-unknown\">react-ssr</code> is selected.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/886/1*YI9ou1Rw8kWTpYI0jVfNLQ.png'>\n</figure>\n<hr>\n<h4>Cloud Storage</h4>\n<p>Create a storage bucket to upload the client-side bundles. These will be served as static files via an actual CDN powered by GCP.</p>\n<p>Go to <a href=\"https://console.cloud.google.com/storage/browser\">Cloud Storage > Browser</a> and create a new bucket. Let’s name it <code class=\"language-unknown\">react-ssr</code> to be consistent. Use default settings for the rest of the options.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*UwWWbp08J6epNBxrEWM04g.png'>\n</figure>\n<p>Once the bucket is created, you should see something like this.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*_IiXV2fWTfO8BbRHhlVv3w.png'>\n</figure>\n<p>Drill into the <code class=\"language-unknown\">react-ssr</code> bucket, click on the <code class=\"language-unknown\">Configuration</code> tab, edit the <code class=\"language-unknown\">Permissions &#x26;gt; Access Control</code>, and set it to <code class=\"language-unknown\">Fine-grained</code>.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*sFMSu2uMbC1-WYUsCwNdeA.png'>\n</figure>\n<p>Click on the <code class=\"language-unknown\">Permissions</code> tab, click on <code class=\"language-unknown\">Permissions &#x26;gt; ADD</code>, and add the user <code class=\"language-unknown\">allUsers</code> with the role <code class=\"language-unknown\">Storage Legacy Object Reader</code> , to make the files in this storage bucket publicly readable.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*ISIl3e0ZNeMKDPQ6FEkAHQ.png'>\n</figure>\n<hr>\n<h4>App Engine</h4>\n<p>This service will manage containerization and scaling. For the purpose of this illustration, this simply means our app will be available over the interwebs via a URL.</p>\n<p>Go to <a href=\"https://console.cloud.google.com/appengine\">App Engine > Dashboard</a> and create a new application. Pick your region accordingly.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*O9q2NgvplKYs1VVkZrYIgQ.png'>\n</figure>\n<p>Once the application is created successfully, you should see something like this on your dashboard.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*-mIN_9raxln55U01vorf1A.png'>\n</figure>\n<p>Next, enable the <a href=\"https://console.cloud.google.com/marketplace/product/google/appengine.googleapis.com\">App Engine Admin API</a>.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*2iwXnlM4VkSZqFlLJLJFfg.png'>\n</figure>\n<p>Once enabled, you should see something like this.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*vcphMFF-51oB037BZOqOHg.png'>\n</figure>\n<p>Next, we need to define the <a href=\"https://cloud.google.com/appengine/docs/standard/nodejs/configuring-your-app-with-app-yaml\">runtime settings</a>, via the <code class=\"language-unknown\">app.yaml</code> file in our codebase, for our Node.js app to be hosted on App Engine.</p>\n<script src='https://gist.github.com/suhanw/16eadcd1612d8810d467748a24e0a07e.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> This tells App Engine the Node.js version you want to use for your app.</p>\n<p><strong>[B]</strong> This sets the runtime environment variable <code class=\"language-unknown\">NODE_ENV</code> with the value “production”, which we can access in our code via <code class=\"language-unknown\">process.env.NODE_ENV</code>.</p>\n<p>Lastly, App Engine starts the app by running <code class=\"language-unknown\">npm start</code>, so let’s add that npm script to our <code class=\"language-unknown\">package.json</code>.</p>\n<script src='https://gist.github.com/suhanw/b18b7ddf97de7cc5504ca1d4e995a8d3.js'></script>\n<hr>\n<h4>Cloud Build</h4>\n<p>We’ll be using Cloud Build to automate the app deployment every time we push commits to the source code repo.</p>\n<p>First, let’s enable the <a href=\"https://console.cloud.google.com/marketplace/product/google/cloudbuild.googleapis.com\">Cloud Build API</a>.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*zJkXHOirjJRdPVAMRxslkA.png'>\n</figure>\n<p>Once enabled, you should see something like this.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*bod8If6hZiqZUsxaru9sqg.png'>\n</figure>\n<p>Next, go to <a href=\"https://console.cloud.google.com/cloud-build/settings/\">Cloud Build > Settings</a> and set the status of the <strong>App Engine Admin</strong> role and the <strong>Service Account User</strong> role to  <strong>Enabled</strong>.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*pTHGjblMZkCIwocb68Brtw.png'>\n</figure>\n<p>For the purpose of this illustration, just think of the <a href=\"https://cloud.google.com/build/docs/securing-builds/configure-access-for-cloud-build-service-account\">Cloud Build service account</a> as the bot that automagically executes our build steps, uploads files to Cloud Storage, and deploys to App Engine.</p>\n<p>Lastly, we define the series of build steps to deploy our app to the cloud in the <code class=\"language-unknown\">cloudbuild.yaml</code> file in our codebase. Cloud Build will execute these steps in consecutive order.</p>\n<script src='https://gist.github.com/suhanw/dbd9b4f22c06232f505eb2f115e4c346.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> This runs <code class=\"language-unknown\">npm install</code> to install all our dependencies in the cloud, just like we would when we’re starting a new project locally.</p>\n<p><strong>[B]</strong> This runs <code class=\"language-unknown\">npm run build</code> to transpile our client-side and server-side bundles via webpack, and save the output to <code class=\"language-unknown\">./build</code>, with build-time environment variable <code class=\"language-unknown\">NODE_ENV</code> set to “production”, which we can access in our code via <code class=\"language-unknown\">process.env.NODE_ENV</code>.</p>\n<p><strong>[C]</strong> This uploads the files in the <code class=\"language-unknown\">./build</code> directory to the Cloud Storage bucket <code class=\"language-unknown\">react-ssr/build</code> which we created previously.</p>\n<p><strong>[D]</strong> This sets the Cloud Build <a href=\"https://cloud.google.com/build/docs/deploying-builds/deploy-appengine#configuring_the_deployment\">timeout to 1600s</a> and deploys the app to App Engine.</p>\n<p>Lastly, let’s kick off automated builds every time we push a new git commit to the source repo by creating a build trigger. Go to <a href=\"https://console.cloud.google.com/cloud-build/triggers\">Cloud Build > Triggers</a>, and create a trigger. Let’s name it <code class=\"language-unknown\">deploy-react-ssr</code>, and select Push to a branch as the repo event to kick off the automated build.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*qpkAeSZV7sXbJvzQEKiVJQ.png'>\n</figure>\n<p>Select the source code repo which includes the build config file <code class=\"language-unknown\">cloudbuild.yaml</code>. Specify the regular expression for the branch that will start the trigger. In my example, I want to trigger the automated build every time I push commits to the <code class=\"language-unknown\">deploy</code> branch.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*aPRWHuXI3UOeitXH1WnzZA.png'>\n</figure>\n<p>Once the trigger is successfully created, you should see something like this.</p>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*Uz13gIx_Ya_jEBYHSrxcNQ.png'>\n</figure>\n<hr>\n<h4>HTML response</h4>\n<p>Similar to Part 1 above, we need to make sure the bundled JS and CSS files are downloaded on the client-side to “hydrate” the SSR-ed markup. The annotated lines below are slightly different from those in Part 1.</p>\n<script src='https://gist.github.com/suhanw/f636755485cf72d5a61a153e6e952b23.js'></script>\n<p>Annotations of the code comments above:</p>\n<p><strong>[A]</strong> In production, App Engine will set the <code class=\"language-unknown\">process.env.PORT</code> environment variable to the port that receives HTTP requests over the interwebs.</p>\n<p><strong>[B]</strong> In production, this is the static server that serves the client-side bundles uploaded to Cloud Storage. Note: there are additional steps to actually enable the Cloud CDN service, but not super relevant to this illustration.</p>\n<hr>\n<h4>Putting it all together</h4>\n<p>You’re still here? Awesome!</p>\n<p>Here’s the workflow that brings all of the above together:</p>\n<ol>\n<li>\n<p>Push a commit to the <code class=\"language-unknown\">deploy</code> branch in the source code repo.</p>\n</li>\n<li>\n<p>The commit triggers Cloud Build to kick off an automated build. Go to <a href=\"https://console.cloud.google.com/cloud-build/builds\">Cloud Build > History</a> for the history of builds and the associated commits.</p>\n</li>\n</ol>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*3VWR5S8bI6_9MByrOIaCTA.png'>\n</figure>\n<ol start=\"3\">\n<li>In a given build, the steps defined in <code class=\"language-unknown\">cloudbuild.yaml</code> are executed.</li>\n</ol>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*NrsX2l3eRuuSJk4ECQ_xUA.png'>\n</figure>\n<ol start=\"4\">\n<li>The client-side bundles are uploaded to Cloud Storage.</li>\n</ol>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*zCz2fUu95c-HifUJM2v00A.png'>\n</figure>\n<ol start=\"5\">\n<li>The Web Application Server is deployed to App Engine.</li>\n</ol>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*s2vmSGUimC8gVj1kluDpgA.png'>\n</figure>\n<ol start=\"6\">\n<li>The SSR app is now up and running in the cloud! 😍</li>\n</ol>\n<figure>\n\t<img src='https://cdn-images-1.medium.com/max/1024/1*M-8Atpg9mjcJqhJIkRlEfQ.png'>\n</figure>\n<hr>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://cloud.google.com/build/docs/building/build-nodejs?hl=en\">Cloud Build: Building Node.js applications</a></li>\n<li><a href=\"https://cloud.google.com/community/tutorials/automated-publishing-cloud-build\">Cloud Build: Automated static website publishing with Cloud Build</a></li>\n<li><a href=\"https://cloud.google.com/build/docs/automating-builds/create-github-app-triggers\">Cloud Build: Creating GitHub App triggers</a></li>\n<li><a href=\"https://cloud.google.com/appengine/docs/standard/nodejs/building-app\">App Engine: Building a Node.js app on App Engine</a></li>\n<li><a href=\"https://cloud.google.com/appengine/docs/standard/nodejs/using-cloud-storage\">App Engine: Using Cloud Storage</a></li>\n<li><a href=\"https://cloud.google.com/storage/docs/access-public-data#api-link\">Cloud Storage: Accessing Public Data</a></li>\n</ul>\n<hr>\n<h3>Read More</h3>\n<ul>\n<li><a href=\"https://www.suhanwijaya.com/posts/use-github-actions-deploy-nextjs-ssg-site\">Use GitHub Actions to Deploy a Next.js SSG Site</a></li>\n<li><a href=\"https://www.suhanwijaya.com/posts/intro-to-react-server-side-rendering\">Intro to React Server Side Rendering</a></li>\n<li><a href=\"https://www.suhanwijaya.com/posts/decouple-data-from-ui-with-react-hooks\">Decouple Data from UI with React Hooks</a></li>\n</ul>\n","pin_order":7,"title":"Deploy React SSR to Production","description":"How to deploy a React SSR app on Google Cloud Platform","image":"https://cdn-images-1.medium.com/max/955/1*i7eATXxurPAPCyLIJ4X5xw.png","tags":"nodejs,technology,javascript,react","canonical_url":"https://javascript.plainenglish.io/deploy-react-ssr-to-production-26350e9985d1","date":"2021-06-02"}},"__N_SSG":true}