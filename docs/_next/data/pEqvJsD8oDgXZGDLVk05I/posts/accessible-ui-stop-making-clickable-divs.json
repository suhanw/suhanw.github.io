{"pageProps":{"postData":{"id":"accessible-ui-stop-making-clickable-divs","contentHtml":"<p><img src=\"https://cdn-images-1.medium.com/max/600/1*1rz1gDWrCac6zYoUnleaaQ.jpeg\" alt=\"\"><figcaption>Source: <a href=\"https://makeameme.org/meme/div-tags-div\">Make a Meme</a></figcaption></p>\n<p>I used to think that accessibility is at best a UX improvement, and at worst ‚Äúcompliance work‚Äù. But as the pandemic turned <a href=\"https://www.boxed.com\">Boxed.com</a> into an essential service for many of our customers, I have read a good number of heartbreaking customer service tickets that revealed my biases and the unintended exclusions caused by my code. Now, I‚Äôm convinced that making the web accessible is the <em>right thing to do.</em></p>\n<p>Accessibility is a broad topic, and a subset of loftier <a href=\"https://www.microsoft.com/design/inclusive/\">inclusive design</a> principles that I won‚Äôt pretend to be an expert on. I‚Äôm just sharing one of the many a11y lessons I learned as a developer.</p>\n<p>So let‚Äôs move on to the main topic.</p>\n<p>We love our <code>div</code> tags. But, simply from a developer experience standpoint without even discussing the merits of <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Semantics#Semantics_in_HTML\">semantic HTML</a> (which deserves its own article), <strong>a</strong>  <strong><code>button</code> is <em>more accessible with less code</em> compared to a clickable <code>div</code></strong>. To illustrate, let‚Äôs go ahead and create a clickable div.</p>\n<pre><code class=\"language-html\">&#x3C;div>Click me&#x3C;/div>\n\n&#x3C;script>\n  function doSomething() {\n    console.log('do something'); \n  }\n\n  document.querySelector('div').onclick = doSomething;\n&#x3C;/script>\n</code></pre>\n<p>Not good enough, we need to visually indicate through the cursor type that the div is clickable (which apparently is also <a href=\"https://medium.com/simple-human/buttons-shouldnt-have-a-hand-cursor-b11e99ca374b\">debatable</a>). Let‚Äôs add some CSS.</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  .someDiv {\n    cursor: pointer;\n  }\n&#x3C;/style>\n\n&#x3C;div class='someDiv'>Click me&#x3C;/div>\n</code></pre>\n<p>Not good enough, we need to verbally indicate through screen readers that the <code>div</code> is a clickable button, and it needs to be keyboard accessible via Tabbing navigation. Let‚Äôs add <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role\">role</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\">tabindex</a> attributes.</p>\n<pre><code class=\"language-html\">&#x3C;div class='someDiv' tabindex='0' role='button'>Click me&#x3C;/div>\n</code></pre>\n<p>Not good enough, the <code>div</code> also needs to be keyboard accessible via Enter and Space Bar keys. Let‚Äôs add more JavaScript (which may not even be 100% <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values#Whitespace_keys\">cross-browser compatible</a>).</p>\n<pre><code class=\"language-html\">&#x3C;script>\n  function doSomething() {\n    console.log('do something'); \n  }\n\n  function handleKeydown(e) {\n    if (e.key === 'Enter' || e.key === ' ') {\n      doSomething();\n    }\n  }\n\n  document.querySelector('div').onclick = doSomething;\n  document.querySelector('div').onkeydown = handleKeydown;\n&#x3C;/script>\n</code></pre>\n<p>So finally, we end up with this.</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  .someDiv {\n    cursor: pointer;\n  }\n&#x3C;/style>\n\n&#x3C;div class='someDiv' tabindex='0' role='button'>Click me&#x3C;/div>\n\n&#x3C;script>\n  function doSomething() {\n    console.log('do something'); \n  }\n\n  handleKeydown(e) {\n    if (e.key === 'Enter' || e.key === 'Space Bar') {\n      doSomething();\n    }\n  }\n\n  document.querySelector('div').onclick = doSomething;\n  document.querySelector('div').onkeydown = handleKeydown;\n&#x3C;/script>\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/894/1*mQeROU_hw38oCDgFGZnzLw.jpeg\" alt=\"\"><figcaption>Source: <a href=\"https://www.thecoderpedia.com/blog/programming-memes/\">CoderPedia</a></figcaption></p>\n<p>Whereas, the <code>button</code> version that‚Äôs <em>equally accessible</em> looks like this.</p>\n<pre><code class=\"language-html\">&#x3C;button>Click here&#x3C;/button>\n\n&#x3C;script>\n  function doSomething() {\n    console.log('do something'); \n  }\n\n  document.querySelector('button').onclick = doSomething;\n&#x3C;/script>\n</code></pre>\n<p>What‚Äôs your approach to creating clickable UI components? Let me know in the comments.</p>\n<p>Note: I decided not to discuss aria attributes because I think they deserve their own article.</p>\n<p>üì´ <em>Hit me up on</em> <a href=\"https://www.linkedin.com/in/suhanwijaya/\"><em>LinkedIn</em></a> <em>or</em> <a href=\"https://twitter.com/suhanw\"><em>Twitter</em></a><em>!</em></p>\n","title":"Accessible UI: Stop making clickable DIVs","description":"Making the web accessible one (less) DIV at a time.","published":true,"date":"2020-11-09","tags":"webdevelopment,a11y,javascript,html","canonical_url":"https://tech.boxed.com/accessible-ui-stop-making-clickable-divs-264115938716"}},"__N_SSG":true}