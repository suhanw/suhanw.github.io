{"pageProps":{"postData":{"id":"missing-cookie-in-http-request-when-using-fetch-api","contentHtml":"<p><img src=\"https://cdn-images-1.medium.com/max/1024/1*LNmccGUYREE_8COw-QeQqQ.jpeg\" alt=\"\"><figcaption>Image source: <a href=\"https://programmerhumour.tumblr.com/image/630496229395218432\">Programmer Humor</a></figcaption></p>\n<p>Here is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">explainer</a> of how cookies work. TLDR:</p>\n<ul>\n<li>Browser sends HTTP request to server.</li>\n<li>Server sends HTTP response with <code>Set-Cookie: cookie=monster</code> header, which sets the cookie in the browser.</li>\n<li>Every subsequent request the browser sends to the server will have the <code>Cookie: cookie=monster</code> header.</li>\n</ul>\n<p>I store a CSRF token in a cookie, which is used by the server to validate client-side HTTP <code>POST</code> requests. The server responds with a 403 if the cookie is missing in the HTTP request.</p>\n<p>On the client-side, I have been using the <a href=\"https://github.com/lquixada/cross-fetch\">cross-fetch</a> package via the <strong>ponyfill</strong> approach.</p>\n<pre><code class=\"language-javascript\">import fetch from 'cross-fetch';\n\nfetch('/some-route', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: { /* some payload */ }\n});\n</code></pre>\n<p>One day, I decided to switch to the <strong>polyfill</strong> approach in order to use the native <code>window.fetch</code>.</p>\n<pre><code class=\"language-javascript\">import 'cross-fetch';\n\nfetch('/some-route', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: { /* some payload */ }\n});\n</code></pre>\n<h3>A bunch of users started getting 403s.</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/300/1*DNVHxZtaNDbGgbIKqEtUMQ.gif\" alt=\"\"><figcaption>Image source: <a href=\"https://knowyourmeme.com/photos/716245-selena-gomez-crying\">Know Your Meme</a></figcaption></p>\n<p>After scouring Stack Overflow and the interwebs (and many tears later), the answer was in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">MDN docs</a> all along:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1024/1*bSFo0kfUKd7G4Skl96dQ-w.png\" alt=\"\"></p>\n<p>The users getting 403s were using browsers older than the versions listed above. So this was the fix:</p>\n<pre><code class=\"language-javascript\">import 'cross-fetch';\n\nfetch('/some-route', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: { /* some payload */ },\n    credentials: 'same-origin' // the fix\n});\n</code></pre>\n<p>You might ask: what about Internet Explorer, your favorite problem child? Well, since <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#Browser_compatibility\">it supports nothing</a>, the polyfill kicks in with a version of fetch that sets same-origin as the default credentials policy, so no 403s.</p>\n<p>Today I learned.</p>\n<p>ðŸ“« <em>Hit me up on</em> <a href=\"https://www.linkedin.com/in/suhanwijaya/\"><em>LinkedIn</em></a> <em>or</em> <a href=\"https://twitter.com/suhanw\"><em>Twitter</em></a><em>!</em></p>\n","title":"Missing cookie in HTTP request when using Fetch API","date":"2020-11-02","tags":"coding,webdev,internet,browsers","canonical_url":"https://medium.com/@suhanwijaya/missing-cookie-in-http-request-when-using-fetch-api-fc0199c3dc3c"}},"__N_SSG":true}