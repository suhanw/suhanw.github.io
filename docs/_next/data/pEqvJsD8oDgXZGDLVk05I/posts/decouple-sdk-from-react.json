{"pageProps":{"postData":{"id":"decouple-sdk-from-react","contentHtml":"<h4>And reduce the size of your future PRs with the Open/Closed Principle</h4>\n<p><img src=\"https://cdn-images-1.medium.com/max/1024/1*p37cH3mNXH_Z2wtXprcT2Q.jpeg\" alt=\"\"><figcaption>KNOW YOUR ENEMY<br /> (image by <a href=\"https://unsplash.com/photos/CatcixzdUcg\">Klara Kulikova</a>, meme from <a href=\"https://programming-memes.com/spaghetti-code-know-your-enemy/\">Programming Memes</a>)</figcaption></p>\n<hr>\n<p>Suppose I use an external service provider to process payments for my E-commerce app, and I need to embed some external SDK code to integrate the payment service into my app.</p>\n<p>In this oversimplified example, let‚Äôs say the payment service is responsible for checking whether a given payment method (e.g, Apple Pay and Google Pay) is available based on the customer‚Äôs device, region, etc. While my ‚Äúcore‚Äù UI component <code>PaymentOptions</code> is responsible for rendering the available payment methods as options. Lastly, I want the flexibility of adding new payment methods in the future (for üìàüí∞reasons).</p>\n<p>I can write it this way.</p>\n<p>{% gist https://gist.github.com/suhanw/1cb50a75844ae43cc3ff9b24d8ffefb7 %}</p>\n<p>However, the UI code is tightly coupled with the external code from the payment service, i.e., <strong>I have to modify the</strong>  <strong><code>PaymentOptions</code> component in order to add a new payment method or to make SDK updates.</strong></p>\n<hr>\n<p>I can perhaps break out the SDK code into a separate hook.</p>\n<p>{% gist https://gist.github.com/suhanw/05b0dabbd467a37ec410c8efc6b6f94f %}</p>\n<p><strong>However, I <em>still</em> have to modify</strong>  <strong><code>PaymentOptions</code></strong>  <strong>and any other components that share the</strong>  <strong><code>usePaymentMethods</code> hook if I wanted to add, for example,</strong>  <strong><code>isPaypalAvailable</code>.</strong></p>\n<hr>\n<p>To minimize the size of future PRs, I‚Äôve been thinking about the Open/Closed Principle, the ‚ÄúO‚Äù in SOLID (check out this excellent <a href=\"https://medium.com/better-programming/revisiting-solid-927e6a5202d3\">explainer</a>): ‚Äú<em>A software artifact should be open for extension but closed for modification.‚Äù</em></p>\n<p>In my own words: <em>I should design this feature in such a way that I don‚Äôt have to touch any of the original code I wrote (closed for modification) if I were to add new payment methods in the future (open for extension).</em></p>\n<p>Here‚Äôs my take on this principle. Let‚Äôs separate the payment service into its own module: a simple object where each key represents a payment method. Every payment method key points to an object with an <code>isAvailable</code> property (a function that uses the SDK code) and a <code>component</code> property (the UI component for the payment option).</p>\n<p>{% gist https://gist.github.com/suhanw/7a3365d6e85f1d236fca12fcc4bba348 %}</p>\n<p>Import <code>paymentServiceModule</code> into the <code>PaymentOptions</code> component.</p>\n<p>{% gist https://gist.github.com/suhanw/b24d91ae215e6b4ba839a0f9bf9ba462 %}</p>\n<p><code>PaymentOptions</code> is now decoupled from the SDK implementation details, and is ignorant of the particular payment methods.</p>\n<p>When I want to extend this feature with a new payment method (i.e., PayPal), <strong>I simply slot in a new key/value pair to <code>paymentServiceModule</code> without having to modify either the <code>PaymentOptions</code> component or the original payment methods</strong>.</p>\n<p>{% gist https://gist.github.com/suhanw/1b7d7ac0a6faf4838a169be094cba14a %}</p>\n<p>The UI code should in theory also be protected against modification if I were to change payment service providers (for üí∏ reasons) as long as the payment method‚Äôs duck typing remains unchanged.</p>\n<p>Am I applying the Open/Closed Principle correctly? Curious to learn other React or JavaScript patterns in the wild that follow this principle.</p>\n<hr>\n<h3>Bonus</h3>\n<p>In <code>paymentServiceModule</code>, lazy load each payment option using the <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\"><code>React.lazy</code></a> API.</p>\n<p>{% gist https://gist.github.com/suhanw/3b3055a9ad84e5bc1b12d423fc2bad6b %}</p>\n<p>In <code>PaymentOptions</code>, wrap each payment option in <code>Suspense</code>, to lazy load the component based on availability.\n{% gist https://gist.github.com/suhanw/3f68acc8c449c430a83109ede199a44f %}</p>\n<hr>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://medium.com/javascript-in-plain-english/a-first-step-to-improve-your-code-before-diving-into-domain-driven-design-or-the-clean-architecture-90da4a80d863\">A First Step to Improve Your Code Before Diving into Domain Driven Design or the Clean Architecture</a> by <a href=\"https://medium.com/u/57de27e2974f\">Andr√©as Hanss</a></li>\n<li><a href=\"https://medium.com/better-programming/revisiting-solid-927e6a5202d3\">Revisiting SOLID</a> by <a href=\"https://medium.com/u/12cc371abade\">Matthew Lucas</a></li>\n</ul>\n<hr>\n<h3>Read More</h3>\n<ul>\n<li><a href=\"https://medium.com/javascript-in-plain-english/intro-to-react-server-side-rendering-3c2af3782d08\">Intro to React Server Side Rendering</a></li>\n<li><a href=\"https://dev.to/suhanw/decouple-data-from-ui-with-react-hooks-3amn\">Decouple Data from UI with React Hooks</a></li>\n<li><a href=\"https://medium.com/javascript-in-plain-english/how-to-decouple-data-from-ui-in-react-d6b1516f4f0b\">Decouple Data from UI in React Part 2: A further exploration of the Hooks, Render Props, and HOC patterns</a></li>\n</ul>\n<hr>\n<p>üì´ <em>Let‚Äôs connect on</em> <a href=\"https://www.linkedin.com/in/suhanwijaya/\"><em>LinkedIn</em></a> <em>or</em> <a href=\"https://twitter.com/suhanw\"><em>Twitter</em></a><em>!</em></p>\n","title":"Decouple SDK Code From Core React Code","description":"And reduce the size of your future PRs with the Open/Closed Principle","tags":"softwaredesign,react,webdev,javascript","canonical_url":"https://medium.com/javascript-in-plain-english/decouple-external-services-from-your-core-ui-code-dd490f91ae49","date":"2020-11-30"}},"__N_SSG":true}