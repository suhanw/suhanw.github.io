{"pageProps":{"postData":{"id":"using-msw-with-storybook-jest-dev","contentHtml":"<figure>\n    <img src=\"/images/using-msw-with-storybook-jest-dev-cover.jpg\">\n</figure>\n<hr>\n<p>In modern frontend development, creating smooth, reliable, and testable user experiences often requires interacting with various APIs. However, calling real APIs during development or tests can slow you down, introduce flakiness, and make your app reliant on services that might be out of your control.</p>\n<p>That's where Mock Service Worker (MSW) comes in. It enables you to mock API responses efficiently, allowing seamless local development, enhanced Storybook integration, and robust Jest unit testing.</p>\n<p>In this post, we'll explore how you can leverage MSW to supercharge your local development, make your Storybook demos more realistic, and test your app’s functionality in isolation with Jest.</p>\n<p>We will be building upon the React/Node.js app from this <a href=\"https://www.suhanwijaya.com/posts/react-node-typescript-2024\">previous blog post</a>.</p>\n<hr>\n<h3>React hooks for API requests</h3>\n<p>I like to keep my API helper methods in separate modules. This method calls the API route <code class=\"language-unknown\">GET /user</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/api/get-user.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">API_ROUTE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span>ResponseData<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API_ROUTE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Wrap the API call in a custom hook that leverages <code class=\"language-unknown\">useReducer</code> to manage the state transitions during the various stages of an API call i.e., loading, success, failure.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/api/get-user.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUserReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"LOADING\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        firstName<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span>\n        lastName<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        error<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useGetUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>getUserReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">,</span>\n          error<span class=\"token operator\">:</span> <span class=\"token string\">\"Uh oh. Something went wrong.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> userState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And finally, create the React component that uses the data fetching hook.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// client/src/components/DataComponent.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useGetUser <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/get-user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DataComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> firstName<span class=\"token punctuation\">,</span> lastName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGetUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This is DataComponent.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">LOADING</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>loading <span class=\"token operator\">&#x26;&#x26;</span> error <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>loading <span class=\"token operator\">&#x26;&#x26;</span> firstName <span class=\"token operator\">&#x26;&#x26;</span> lastName <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"Yeah.\" -</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token maybe-class-name\">DataComponent</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<hr>\n<h3>Setting up MSW in the project</h3>\n<p>Suppose the <code class=\"language-unknown\">GET /user</code> endpoint is not ready at the moment, but you and your backend team agree on a JSON response data structure. Let's define a TypeScript type to codify the backend-frontend contract:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/api/get-user.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now, this is where MSW unblocks the frontend work even though the backend is not ready. Let's install <code class=\"language-unknown\">msw</code> in your project:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm install msw --save-dev</code></pre></div>\n<p>In a nutshell, MSW will intercept outgoing API requests, and run a resolver function to handle that intercepted request. Your job is to write that resolver function to return a mock response that follows the backend-frontend contract.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/api/get-user-mock.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> http<span class=\"token punctuation\">,</span> HttpResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"msw\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">API_ROUTE</span><span class=\"token punctuation\">,</span> ResponseData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./get-user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Mock data enforced by the TypeScript type `ResponseData` defined above.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mockResponseData<span class=\"token operator\">:</span> ResponseData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">\"c7b3d8e0-5e0b-4b0f-8b3a-3b9f4b3d3b3d\"</span><span class=\"token punctuation\">,</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"Wick\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The resolver function that handles intercepted `GET /user` requests.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getUserMockHandler <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API_ROUTE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>mockResponseData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<hr>\n<h3>Local development</h3>\n<p>In the browser, MSW works by registering a Service Worker responsible for request interception on the network level.</p>\n<p>If your application registers a Service Worker, it must host and serve the worker script. The library CLI provides you with the init command to quickly copy the <code class=\"language-unknown\">./mockServiceWorker.js</code> worker script into your application’s public directory.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx msw init PUBLIC_DIR --save</code></pre></div>\n<p>Once copied, navigate to the <code class=\"language-unknown\">/mockServiceWorker.js</code> URL of your application in your browser (e.g. if your application is running on <code class=\"language-unknown\">http://localhost:3000</code>, go to the <code class=\"language-unknown\">localhost:3000/mockServiceWorker.js</code> route). You should see the worker script contents. If you see a 404 or a MIME type error, make sure you are specifying the correct <code class=\"language-unknown\">PUBLIC_DIR</code> when running the init command, and that you adjust any potential configuration of your application that would affect serving static files.</p>\n<p>In our case, I decided to register a specific route for the Service Worker script in the Express app:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// server/src/index.ts</span>\n\n<span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isDev <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Only register this route in development</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"/mockServiceWorker.js\"</span><span class=\"token punctuation\">,</span>\n    express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// I ran `npx msw init client/src/mocks --save`</span>\n      <span class=\"token comment\">// to generate and copy the worker script.</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./client/src/mocks/mockServiceWorker.js\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>To enable MSW on the frontend, call the <a href=\"https://mswjs.io/docs/api/setup-worker\">setupWorker()</a> function to prepare the client-worker communication channel to enable API mocking, passing in the resolver function <code class=\"language-unknown\">getUserMockHandler</code> defined above.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/mocks/browser.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setupWorker <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"msw/browser\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getUserMockHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/get-user-mock\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>getUserMockHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token function\">setupWorker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">enableMocking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// `worker.start()` returns a Promise that resolves</span>\n  <span class=\"token comment\">// once the Service Worker is up and ready to intercept requests.</span>\n  <span class=\"token keyword\">return</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And lastly, we activate the Service Worker by calling <code class=\"language-unknown\">worker.start()</code>. Because activating the Service Worker is an asynchronous operation, it’s a good idea to await the <code class=\"language-unknown\">worker.start()</code> Promise before rendering your application. Failing to await it may result in a race condition between the worker registration and the initial requests your application makes.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/index.ts</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> enableMocking <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./mocks/browser\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isDev <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Only enable API mocking in development so production traffic is unaffected.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">enableMocking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Start the app <code class=\"language-unknown\">npm run dev</code> and observe these logs in your browser console. 🎉</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">[MSW] Mocking enabled.\n[MSW] 12:16:09 GET /user (200 OK)</code></pre></div>\n<hr>\n<h3>Storybook</h3>\n<p>Assuming that you've already <a href=\"https://storybook.js.org/docs\">installed Storybook</a> in your project, we start by integrating MSW by installing the Storybook addon:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm install msw-storybook-addon --save-dev</code></pre></div>\n<p>Initialize MSW and provide the MSW loader in <code class=\"language-unknown\">.storybook/preview.ts</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// .storybook/preview.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Preview <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> initialize<span class=\"token punctuation\">,</span> mswLoader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"msw-storybook-addon\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> preview<span class=\"token operator\">:</span> Preview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// other code...</span>\n\n  <span class=\"token comment\">// Provide the MSW addon loader globally.</span>\n  loaders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>mswLoader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> preview<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Similar to local development where your app needs to host and serve the Service Worker script, Storybook also needs to do the same. Recall that we already generated the worker script in <code class=\"language-unknown\">client/src/mocks/mockServiceWorker.js</code> earlier. You can add the path to the same worker script in the Storybook <a href=\"https://storybook.js.org/docs/configure/integration/images-and-assets#serving-static-files-via-storybook-configuration\">static files config</a> in <code class=\"language-unknown\">.storybook/main.ts</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// .storybook/main.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> StorybookConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/react-vite\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> StorybookConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// other code...</span>\n\n  <span class=\"token comment\">// Enable Storybook to serve the MSW script</span>\n  staticDirs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../client/src/mocks\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> config<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Finally, you can use the same resolver function <code class=\"language-unknown\">getUserMockHandler</code> in your Story.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// client/src/components/DataComponent.stories.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Meta</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">StoryObj</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">DataComponent</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./DataComponent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> getUserMockHandler <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/get-user-mock\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> meta<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Meta</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">DataComponent</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"DataComponent\"</span><span class=\"token punctuation\">,</span>\n  component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataComponent</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> meta<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Story</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">StoryObj</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">DataComponent</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rendered state when API request succeeds.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Success</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Story</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parameters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    msw<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Add the resolver function to intercept `GET /user` requests</span>\n      handlers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>getUserMockHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rendered state when API request fails.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Story</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You can have multiple stories per component, each story</span>\n<span class=\"token comment\">// capturing the rendered state of this particular component.</span>\n</code></pre></div>\n<p>Start Storybook <code class=\"language-unknown\">npm run storybook</code> and observe these logs in your browser console. 🎉</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">[MSW] Mocking enabled.\n[MSW] 12:16:09 GET /user (200 OK)</code></pre></div>\n<hr>\n<h3>Jest</h3>\n<p>Again, I will assume that you have installed <a href=\"https://jestjs.io/docs/getting-started\">Jest</a> and <a href=\"https://testing-library.com/docs/\">Testing Library</a> in your project.</p>\n<p>Jest runs on Node.js, therefore we need to setup MSW via the <a href=\"https://mswjs.io/docs/integrations/node\">Node.js integration</a>. So first, we export an MSW server to intercept outgoing traffic.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/src/mocks/server.ts</span>\n\n<span class=\"token comment\">// Import from `msw/node` to integrate MSW in Node.js.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setupServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"msw/node\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// We will then use the `server` object in our tests to</span>\n<span class=\"token comment\">// intercept requests and respond with mock data.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">setupServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next, let's create a test file for <code class=\"language-unknown\">DataComponent</code>, where we will import the MSW server and again reuse our resolver function <code class=\"language-unknown\">getUserMockHandler</code> to handle intercepted <code class=\"language-unknown\">GET /user</code> requests.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// client/src/components/DataComponent.test.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> waitFor <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">DataComponent</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./DataComponent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> server <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../mocks/server\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> getUserMockHandler<span class=\"token punctuation\">,</span> mockResponseData <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/get-user-mock\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Register the `GET /user` resolver prior to running tests.</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>getUserMockHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Start listening for and intercepting `GET /user` requests.</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This will remove any runtime request handlers</span>\n  <span class=\"token comment\">// after each test, ensuring isolated network behavior.</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resetHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Disable request interception and clean up.</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DataComponent\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should display user data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">DataComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is DataComponent.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOADING\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// wait until the `GET /user` request promise resolves</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOADING\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">not</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token punctuation\">,</span> lastName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> mockResponseData<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n        screen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"Yeah.\" -</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// other tests...</span>\n</code></pre></div>\n<p>To test client-side React component, Jest leverages JSDOM to simulate a browser environment in Node.js without having to launch an actual browser.</p>\n<p>At the time of this writing, there are a couple of \"gotchas\" caused by the fact that we're using JSDOM as our test environment while using the Node.js integration for MSW.</p>\n<p>Gotcha #1, the <code class=\"language-unknown\">msw/node</code> module is not exported in a client-side environment, which includes JSDOM, i.e., <code class=\"language-unknown\">Cannot find module msw/node</code> throws when running the test.</p>\n<p>Gotcha #2, <code class=\"language-unknown\">msw/node</code> expects and uses several Node.js globals that do not exist in the JSDOM environment, i.e., <code class=\"language-unknown\">ReferenceError: TextEncoder is not defined</code> throws from the <code class=\"language-unknown\">msw/node</code> library.</p>\n<p>Here are the fixes:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// client/jest.config.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Config <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  displayName<span class=\"token operator\">:</span> <span class=\"token string\">\"client\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// To fix Gotcha #2, we set `jest-fixed-jsdom` as the test environment,</span>\n  <span class=\"token comment\">// a superset of `jest-environment-jsdom` that includes Node.js globals</span>\n  testEnvironment<span class=\"token operator\">:</span> <span class=\"token string\">\"jest-fixed-jsdom\"</span><span class=\"token punctuation\">,</span>\n  testEnvironmentOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// To fix Gotcha #1, override the exported lib version</span>\n    <span class=\"token comment\">// which defaults to \"browser\" for JSDOM.</span>\n    customExportConditions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"msw\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">//   other settings...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Run the test <code class=\"language-unknown\">npm test</code> and observe the green checks. 🎉</p>\n<hr>\n<h3>Putting it all together</h3>\n<p>This blog post covers a lot of one-time setup. However, as your app grows, it will be much simpler to add new API helper modules, mocks, and MSW resolvers, and extend the MSW resolvers in your local dev, Storybook, and Jest. This offers numerous benefits, including faster development cycles, more consistent testing, easier simulation of API behaviors, and perhaps a happier collaboration with your backend teams. 🍻</p>\n<p>Here’s <a href=\"https://github.com/suhanw/blog-storybook-jest-msw\">my repo</a> to see the whole thing come together.</p>\n<hr>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://storybook.js.org/addons/msw-storybook-addon\">Mock API requests in Storybook with Mock Service Worker</a></li>\n<li><a href=\"https://mswjs.io/docs/integrations/node#test-runner\">Integrate MSW with test runners</a></li>\n<li><a href=\"https://mswjs.io/docs/migrations/1.x-to-2.x#frequent-issues\">MSW 2.0 frequent issues</a></li>\n<li><a href=\"https://www.suhanwijaya.com/posts/react-node-typescript-2024\">Building a full stack React and Node web app with TypeScript and ESBuild</a></li>\n</ul>\n","pin_order":13,"title":"Mock Service Worker, Storybook, Jest, and React in 2024","description":"Supercharging local React development, Storybook, and Jest tests with Mock Service Worker (MSW)","image":"https://www.suhanwijaya.com/images/using-msw-with-storybook-jest-dev-cover.jpg","tags":"javascript,webdev,typescript,storybook,jest,msw","date":"2024-10-14"}},"__N_SSG":true}